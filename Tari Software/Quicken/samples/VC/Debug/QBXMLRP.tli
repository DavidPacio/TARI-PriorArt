// Created by Microsoft (R) C/C++ Compiler Version 12.00.8964.0 (52111dd4).
//
// d:\qb12sdkcd\samples\vc\debug\QBXMLRP.tli
//
// Wrapper implementations for Win32 type library D:\QuickBooks\qbexe\uk\QBXMLRP.dll
// compiler-generated file created 02/21/03 at 16:46:25 - DO NOT EDIT!

#pragma once

//
// interface IRequestProcessor2 wrapper method implementations
//

inline _bstr_t IRequestProcessor2::ProcessRequest ( _bstr_t ticket, _bstr_t inputRequest ) {
    BSTR _result;
    HRESULT _hr = raw_ProcessRequest(ticket, inputRequest, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IRequestProcessor2::OpenConnection ( _bstr_t appID, _bstr_t appName ) {
    HRESULT _hr = raw_OpenConnection(appID, appName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRequestProcessor2::CloseConnection ( ) {
    HRESULT _hr = raw_CloseConnection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IRequestProcessor2::BeginSession ( _bstr_t qbFileName, enum QBFileMode reqFileMode ) {
    BSTR _result;
    HRESULT _hr = raw_BeginSession(qbFileName, reqFileMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IRequestProcessor2::EndSession ( _bstr_t ticket ) {
    HRESULT _hr = raw_EndSession(ticket);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IRequestProcessor2::GetCurrentCompanyFileName ( _bstr_t ticket ) {
    BSTR _result;
    HRESULT _hr = raw_GetCurrentCompanyFileName(ticket, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short IRequestProcessor2::GetMajorVersion ( ) {
    short _result;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IRequestProcessor2::GetMinorVersion ( ) {
    short _result;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum QBXMLRPReleaseLevel IRequestProcessor2::GetReleaseLevel ( ) {
    enum QBXMLRPReleaseLevel _result;
    HRESULT _hr = get_ReleaseLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IRequestProcessor2::GetReleaseNumber ( ) {
    short _result;
    HRESULT _hr = get_ReleaseNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IRequestProcessor2::GetQBXMLVersionsForSession ( _bstr_t ticket ) {
    SAFEARRAY * _result;
    HRESULT _hr = get_QBXMLVersionsForSession(ticket, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRequestProcessor wrapper method implementations
//

inline _bstr_t IRequestProcessor::ProcessRequest ( _bstr_t ticket, _bstr_t inputRequest ) {
    BSTR _result;
    HRESULT _hr = raw_ProcessRequest(ticket, inputRequest, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IRequestProcessor::OpenConnection ( _bstr_t appID, _bstr_t appName ) {
    HRESULT _hr = raw_OpenConnection(appID, appName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IRequestProcessor::CloseConnection ( ) {
    HRESULT _hr = raw_CloseConnection();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IRequestProcessor::BeginSession ( _bstr_t qbFileName, enum QBFileMode reqFileMode ) {
    BSTR _result;
    HRESULT _hr = raw_BeginSession(qbFileName, reqFileMode, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IRequestProcessor::EndSession ( _bstr_t ticket ) {
    HRESULT _hr = raw_EndSession(ticket);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IRequestProcessor::GetCurrentCompanyFileName ( _bstr_t ticket ) {
    BSTR _result;
    HRESULT _hr = raw_GetCurrentCompanyFileName(ticket, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short IRequestProcessor::GetMajorVersion ( ) {
    short _result;
    HRESULT _hr = get_MajorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IRequestProcessor::GetMinorVersion ( ) {
    short _result;
    HRESULT _hr = get_MinorVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum QBXMLRPReleaseLevel IRequestProcessor::GetReleaseLevel ( ) {
    enum QBXMLRPReleaseLevel _result;
    HRESULT _hr = get_ReleaseLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short IRequestProcessor::GetReleaseNumber ( ) {
    short _result;
    HRESULT _hr = get_ReleaseNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline SAFEARRAY * IRequestProcessor::GetQBXMLVersionsForSession ( _bstr_t ticket ) {
    SAFEARRAY * _result;
    HRESULT _hr = get_QBXMLVersionsForSession(ticket, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}
